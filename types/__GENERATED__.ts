/* eslint-disable */
/* THIS FILE HAS BEEN AUTOGENERATED. DO NOT EDIT. */
import { GraphQLClient } from 'graphql-request';
import { HeadersInit } from 'graphql-request/dist/types.dom';
import { print } from 'graphql';
import gql from 'graphql-tag';
export type Maybe<T> = T;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  JsonArgument: any;
};

export type Query = {
  ping?: Maybe<Scalars['String']>;
  entries?: Maybe<EntryInterfacePagination>;
  entry?: Maybe<EntryInterface>;
  collections?: Maybe<Array<Maybe<Collection>>>;
  collection?: Maybe<Collection>;
  assets?: Maybe<AssetInterfacePagination>;
  asset?: Maybe<AssetInterface>;
  assetContainers?: Maybe<Array<Maybe<AssetContainer>>>;
  assetContainer?: Maybe<AssetContainer>;
  taxonomies?: Maybe<Array<Maybe<Taxonomy>>>;
  taxonomy?: Maybe<Taxonomy>;
  terms?: Maybe<TermInterfacePagination>;
  term?: Maybe<TermInterface>;
  globalSets?: Maybe<Array<Maybe<GlobalSetInterface>>>;
  globalSet?: Maybe<GlobalSetInterface>;
  navs?: Maybe<Array<Maybe<Navigation>>>;
  nav?: Maybe<Navigation>;
  sites?: Maybe<Array<Maybe<Site>>>;
  users?: Maybe<UserPagination>;
  user?: Maybe<User>;
};


export type QueryEntriesArgs = {
  collection?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  page?: Maybe<Scalars['Int']>;
  filter?: Maybe<Scalars['JsonArgument']>;
  sort?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type QueryEntryArgs = {
  id?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  collection?: Maybe<Scalars['String']>;
  uri?: Maybe<Scalars['String']>;
};


export type QueryCollectionArgs = {
  handle?: Maybe<Scalars['String']>;
};


export type QueryAssetsArgs = {
  container: Scalars['String'];
  limit?: Maybe<Scalars['Int']>;
  page?: Maybe<Scalars['Int']>;
  sort?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type QueryAssetArgs = {
  id?: Maybe<Scalars['String']>;
  container?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
};


export type QueryAssetContainerArgs = {
  handle?: Maybe<Scalars['String']>;
};


export type QueryTaxonomyArgs = {
  handle?: Maybe<Scalars['String']>;
};


export type QueryTermsArgs = {
  taxonomy?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  page?: Maybe<Scalars['Int']>;
  filter?: Maybe<Scalars['JsonArgument']>;
  sort?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type QueryTermArgs = {
  id?: Maybe<Scalars['String']>;
};


export type QueryGlobalSetArgs = {
  handle?: Maybe<Scalars['String']>;
  site?: Maybe<Scalars['String']>;
};


export type QueryNavArgs = {
  handle?: Maybe<Scalars['String']>;
};


export type QueryUsersArgs = {
  limit?: Maybe<Scalars['Int']>;
  page?: Maybe<Scalars['Int']>;
  filter?: Maybe<Scalars['JsonArgument']>;
  sort?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type QueryUserArgs = {
  id?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
};


export type EntryInterfacePagination = {
  /** List of items on the current page */
  data?: Maybe<Array<Maybe<EntryInterface>>>;
  /** Number of total items selected by the query */
  total: Scalars['Int'];
  /** Number of items returned per page */
  per_page: Scalars['Int'];
  /** Current page of the cursor */
  current_page: Scalars['Int'];
  /** Number of the first item returned */
  from?: Maybe<Scalars['Int']>;
  /** Number of the last item returned */
  to?: Maybe<Scalars['Int']>;
  /** The last page (number of pages) */
  last_page: Scalars['Int'];
  /** Determines if cursor has more pages after the current page */
  has_more_pages: Scalars['Boolean'];
};

export type EntryInterface = {
  id: Scalars['ID'];
  title: Scalars['String'];
  slug: Scalars['String'];
  url?: Maybe<Scalars['String']>;
  uri?: Maybe<Scalars['String']>;
  edit_url: Scalars['String'];
  permalink?: Maybe<Scalars['String']>;
  published: Scalars['Boolean'];
  private: Scalars['Boolean'];
  collection: Collection;
  date?: Maybe<Scalars['String']>;
  last_modified?: Maybe<Scalars['String']>;
};


export type EntryInterfaceDateArgs = {
  format?: Maybe<Scalars['String']>;
};


export type EntryInterfaceLast_ModifiedArgs = {
  format?: Maybe<Scalars['String']>;
};

export type Collection = {
  handle: Scalars['String'];
  title: Scalars['String'];
  structure?: Maybe<CollectionStructure>;
};

export type CollectionStructure = {
  handle: Scalars['String'];
  title: Scalars['String'];
  max_depth?: Maybe<Scalars['Int']>;
  expects_root: Scalars['Boolean'];
  tree?: Maybe<Array<Maybe<TreeBranch>>>;
};


export type CollectionStructureTreeArgs = {
  site?: Maybe<Scalars['String']>;
};

export type TreeBranch = {
  depth: Scalars['Int'];
  page?: Maybe<PageInterface>;
  children?: Maybe<Array<Maybe<TreeBranch>>>;
};

export type PageInterface = {
  id: Scalars['ID'];
  title: Scalars['String'];
  slug: Scalars['String'];
  url?: Maybe<Scalars['String']>;
  uri?: Maybe<Scalars['String']>;
  edit_url: Scalars['String'];
  permalink?: Maybe<Scalars['String']>;
  published: Scalars['Boolean'];
  private: Scalars['Boolean'];
  collection: Collection;
  date?: Maybe<Scalars['String']>;
  last_modified?: Maybe<Scalars['String']>;
};


export type PageInterfaceDateArgs = {
  format?: Maybe<Scalars['String']>;
};


export type PageInterfaceLast_ModifiedArgs = {
  format?: Maybe<Scalars['String']>;
};

export type AssetInterfacePagination = {
  /** List of items on the current page */
  data?: Maybe<Array<Maybe<AssetInterface>>>;
  /** Number of total items selected by the query */
  total: Scalars['Int'];
  /** Number of items returned per page */
  per_page: Scalars['Int'];
  /** Current page of the cursor */
  current_page: Scalars['Int'];
  /** Number of the first item returned */
  from?: Maybe<Scalars['Int']>;
  /** Number of the last item returned */
  to?: Maybe<Scalars['Int']>;
  /** The last page (number of pages) */
  last_page: Scalars['Int'];
  /** Determines if cursor has more pages after the current page */
  has_more_pages: Scalars['Boolean'];
};

export type AssetInterface = {
  id: Scalars['String'];
  path: Scalars['String'];
  extension: Scalars['String'];
  is_audio?: Maybe<Scalars['Boolean']>;
  is_image?: Maybe<Scalars['Boolean']>;
  is_video?: Maybe<Scalars['Boolean']>;
  blueprint?: Maybe<Scalars['String']>;
  edit_url?: Maybe<Scalars['String']>;
  container: AssetContainer;
  folder?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  permalink?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['String']>;
  size_bytes?: Maybe<Scalars['Int']>;
  size_kilobytes?: Maybe<Scalars['Float']>;
  size_megabytes?: Maybe<Scalars['Float']>;
  size_gigabytes?: Maybe<Scalars['Float']>;
  size_b?: Maybe<Scalars['Int']>;
  size_kb?: Maybe<Scalars['Float']>;
  size_mb?: Maybe<Scalars['Float']>;
  size_gb?: Maybe<Scalars['Float']>;
  last_modified?: Maybe<Scalars['String']>;
  focus_css?: Maybe<Scalars['String']>;
  height?: Maybe<Scalars['Int']>;
  width?: Maybe<Scalars['Int']>;
  orientation?: Maybe<Scalars['String']>;
  ratio?: Maybe<Scalars['Float']>;
};

export type AssetContainer = {
  handle: Scalars['String'];
  title: Scalars['String'];
};

export type Taxonomy = {
  handle: Scalars['String'];
  title: Scalars['String'];
};

export type TermInterfacePagination = {
  /** List of items on the current page */
  data?: Maybe<Array<Maybe<TermInterface>>>;
  /** Number of total items selected by the query */
  total: Scalars['Int'];
  /** Number of items returned per page */
  per_page: Scalars['Int'];
  /** Current page of the cursor */
  current_page: Scalars['Int'];
  /** Number of the first item returned */
  from?: Maybe<Scalars['Int']>;
  /** Number of the last item returned */
  to?: Maybe<Scalars['Int']>;
  /** The last page (number of pages) */
  last_page: Scalars['Int'];
  /** Determines if cursor has more pages after the current page */
  has_more_pages: Scalars['Boolean'];
};

export type TermInterface = {
  id: Scalars['ID'];
  title: Scalars['String'];
  slug: Scalars['String'];
  url?: Maybe<Scalars['String']>;
  uri?: Maybe<Scalars['String']>;
  edit_url: Scalars['String'];
  permalink?: Maybe<Scalars['String']>;
  taxonomy: Taxonomy;
};

export type GlobalSetInterface = {
  handle: Scalars['String'];
  title: Scalars['String'];
  site: Site;
};

export type Site = {
  handle: Scalars['String'];
  name: Scalars['String'];
  locale: Scalars['String'];
  short_locale: Scalars['String'];
  url: Scalars['String'];
};

export type Navigation = {
  handle: Scalars['String'];
  title: Scalars['String'];
  max_depth?: Maybe<Scalars['Int']>;
  expects_root: Scalars['Boolean'];
  tree?: Maybe<Array<Maybe<TreeBranch>>>;
};


export type NavigationTreeArgs = {
  site?: Maybe<Scalars['String']>;
};

export type UserPagination = {
  /** List of items on the current page */
  data?: Maybe<Array<Maybe<User>>>;
  /** Number of total items selected by the query */
  total: Scalars['Int'];
  /** Number of items returned per page */
  per_page: Scalars['Int'];
  /** Current page of the cursor */
  current_page: Scalars['Int'];
  /** Number of the first item returned */
  from?: Maybe<Scalars['Int']>;
  /** Number of the last item returned */
  to?: Maybe<Scalars['Int']>;
  /** The last page (number of pages) */
  last_page: Scalars['Int'];
  /** Determines if cursor has more pages after the current page */
  has_more_pages: Scalars['Boolean'];
};

export type User = {
  name?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  roles?: Maybe<Array<Maybe<Role>>>;
  groups?: Maybe<Array<Maybe<UserGroup>>>;
  avatar?: Maybe<AssetInterface>;
  id?: Maybe<Scalars['String']>;
  initials?: Maybe<Scalars['String']>;
  edit_url?: Maybe<Scalars['String']>;
};

export type Role = {
  handle?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type UserGroup = {
  handle?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type LabeledValue = {
  value?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
};

export type TableRow = {
  cells?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type Page = PageInterface & {
  id: Scalars['ID'];
  title: Scalars['String'];
  slug: Scalars['String'];
  url?: Maybe<Scalars['String']>;
  uri?: Maybe<Scalars['String']>;
  edit_url: Scalars['String'];
  permalink?: Maybe<Scalars['String']>;
  published: Scalars['Boolean'];
  private: Scalars['Boolean'];
  collection: Collection;
  date?: Maybe<Scalars['String']>;
  last_modified?: Maybe<Scalars['String']>;
};


export type PageDateArgs = {
  format?: Maybe<Scalars['String']>;
};


export type PageLast_ModifiedArgs = {
  format?: Maybe<Scalars['String']>;
};

export type Set_Bard_YoutubeVideo = {
  youtube_id: Scalars['String'];
  poster_image: AssetInterface;
  type: Scalars['String'];
};

export type BardText = {
  type: Scalars['String'];
  text?: Maybe<Scalars['String']>;
};

export type Sets_Bard = Set_Bard_YoutubeVideo | BardText;

export type Entry_Blog_Blog = EntryInterface & {
  title: Scalars['String'];
  content?: Maybe<Scalars['String']>;
  author?: Maybe<User>;
  template?: Maybe<Scalars['String']>;
  assets?: Maybe<Array<Maybe<AssetInterface>>>;
  slug: Scalars['String'];
  date?: Maybe<Scalars['String']>;
  tags?: Maybe<Array<Maybe<TermInterface>>>;
  id: Scalars['ID'];
  url?: Maybe<Scalars['String']>;
  uri?: Maybe<Scalars['String']>;
  edit_url: Scalars['String'];
  permalink?: Maybe<Scalars['String']>;
  published: Scalars['Boolean'];
  private: Scalars['Boolean'];
  collection: Collection;
  last_modified?: Maybe<Scalars['String']>;
};


export type Entry_Blog_BlogContentArgs = {
  format?: Maybe<Scalars['String']>;
};


export type Entry_Blog_BlogDateArgs = {
  format?: Maybe<Scalars['String']>;
};


export type Entry_Blog_BlogLast_ModifiedArgs = {
  format?: Maybe<Scalars['String']>;
};

export type EntryPage_Blog_Blog = PageInterface & {
  title: Scalars['String'];
  content?: Maybe<Scalars['String']>;
  author?: Maybe<User>;
  template?: Maybe<Scalars['String']>;
  assets?: Maybe<Array<Maybe<AssetInterface>>>;
  slug: Scalars['String'];
  date?: Maybe<Scalars['String']>;
  tags?: Maybe<Array<Maybe<TermInterface>>>;
  id: Scalars['ID'];
  url?: Maybe<Scalars['String']>;
  uri?: Maybe<Scalars['String']>;
  edit_url: Scalars['String'];
  permalink?: Maybe<Scalars['String']>;
  published: Scalars['Boolean'];
  private: Scalars['Boolean'];
  collection: Collection;
  last_modified?: Maybe<Scalars['String']>;
};


export type EntryPage_Blog_BlogContentArgs = {
  format?: Maybe<Scalars['String']>;
};


export type EntryPage_Blog_BlogDateArgs = {
  format?: Maybe<Scalars['String']>;
};


export type EntryPage_Blog_BlogLast_ModifiedArgs = {
  format?: Maybe<Scalars['String']>;
};

export type Entry_Pages_Pages = EntryInterface & {
  title: Scalars['String'];
  bard?: Maybe<Array<Maybe<Sets_Bard>>>;
  slug: Scalars['String'];
  parent?: Maybe<EntryInterface>;
  id: Scalars['ID'];
  url?: Maybe<Scalars['String']>;
  uri?: Maybe<Scalars['String']>;
  edit_url: Scalars['String'];
  permalink?: Maybe<Scalars['String']>;
  published: Scalars['Boolean'];
  private: Scalars['Boolean'];
  collection: Collection;
  date?: Maybe<Scalars['String']>;
  last_modified?: Maybe<Scalars['String']>;
};


export type Entry_Pages_PagesDateArgs = {
  format?: Maybe<Scalars['String']>;
};


export type Entry_Pages_PagesLast_ModifiedArgs = {
  format?: Maybe<Scalars['String']>;
};

export type EntryPage_Pages_Pages = PageInterface & {
  title: Scalars['String'];
  bard?: Maybe<Array<Maybe<Sets_Bard>>>;
  slug: Scalars['String'];
  parent?: Maybe<EntryInterface>;
  id: Scalars['ID'];
  url?: Maybe<Scalars['String']>;
  uri?: Maybe<Scalars['String']>;
  edit_url: Scalars['String'];
  permalink?: Maybe<Scalars['String']>;
  published: Scalars['Boolean'];
  private: Scalars['Boolean'];
  collection: Collection;
  date?: Maybe<Scalars['String']>;
  last_modified?: Maybe<Scalars['String']>;
};


export type EntryPage_Pages_PagesDateArgs = {
  format?: Maybe<Scalars['String']>;
};


export type EntryPage_Pages_PagesLast_ModifiedArgs = {
  format?: Maybe<Scalars['String']>;
};

export type Term_Tags_Tags = TermInterface & {
  title: Scalars['String'];
  content?: Maybe<Scalars['String']>;
  slug: Scalars['String'];
  id: Scalars['ID'];
  url?: Maybe<Scalars['String']>;
  uri?: Maybe<Scalars['String']>;
  edit_url: Scalars['String'];
  permalink?: Maybe<Scalars['String']>;
  taxonomy: Taxonomy;
};


export type Term_Tags_TagsContentArgs = {
  format?: Maybe<Scalars['String']>;
};

export type Asset_Assets = AssetInterface & {
  alt?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  path: Scalars['String'];
  extension: Scalars['String'];
  is_audio?: Maybe<Scalars['Boolean']>;
  is_image?: Maybe<Scalars['Boolean']>;
  is_video?: Maybe<Scalars['Boolean']>;
  blueprint?: Maybe<Scalars['String']>;
  edit_url?: Maybe<Scalars['String']>;
  container: AssetContainer;
  folder?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  permalink?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['String']>;
  size_bytes?: Maybe<Scalars['Int']>;
  size_kilobytes?: Maybe<Scalars['Float']>;
  size_megabytes?: Maybe<Scalars['Float']>;
  size_gigabytes?: Maybe<Scalars['Float']>;
  size_b?: Maybe<Scalars['Int']>;
  size_kb?: Maybe<Scalars['Float']>;
  size_mb?: Maybe<Scalars['Float']>;
  size_gb?: Maybe<Scalars['Float']>;
  last_modified?: Maybe<Scalars['String']>;
  focus_css?: Maybe<Scalars['String']>;
  height?: Maybe<Scalars['Int']>;
  width?: Maybe<Scalars['Int']>;
  orientation?: Maybe<Scalars['String']>;
  ratio?: Maybe<Scalars['Float']>;
};

export type PageSlugsQueryVariables = Exact<{ [key: string]: never; }>;


export type PageSlugsQuery = { entries?: Maybe<{ data?: Maybe<Array<Maybe<{ uri?: Maybe<string> } | { uri?: Maybe<string> }>>> }> };

export type PageDataQueryVariables = Exact<{
  uri?: Maybe<Scalars['String']>;
}>;


export type PageDataQuery = { entry?: Maybe<{ title: string } | { title: string, bard?: Maybe<Array<Maybe<{ type: string, youtube_id: string, poster_image: { url?: Maybe<string> } } | { type: string, text?: Maybe<string> }>>> }> };


export const PageSlugsDocument = gql`
    query PageSlugs {
  entries(collection: "pages") {
    data {
      uri
    }
  }
}
    `;
export const PageDataDocument = gql`
    query PageData($uri: String) {
  entry(uri: $uri) {
    title
    ... on Entry_Pages_Pages {
      bard {
        ... on Set_Bard_YoutubeVideo {
          type
          youtube_id
          poster_image {
            url
          }
        }
        ... on BardText {
          type
          text
        }
      }
    }
  }
}
    `;

export type SdkFunctionWrapper = <T>(action: () => Promise<T>) => Promise<T>;


const defaultWrapper: SdkFunctionWrapper = sdkFunction => sdkFunction();
export function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {
  return {
    PageSlugs(variables?: PageSlugsQueryVariables, requestHeaders?: HeadersInit): Promise<PageSlugsQuery> {
      return withWrapper(() => client.request<PageSlugsQuery>(print(PageSlugsDocument), variables, requestHeaders));
    },
    PageData(variables?: PageDataQueryVariables, requestHeaders?: HeadersInit): Promise<PageDataQuery> {
      return withWrapper(() => client.request<PageDataQuery>(print(PageDataDocument), variables, requestHeaders));
    }
  };
}
export type Sdk = ReturnType<typeof getSdk>;